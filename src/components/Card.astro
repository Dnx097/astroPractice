---
export interface props {
  id: number;
  name;
  status?;
  species?;
  type?;
  gender?;
  image?;
  url?: string;
  created?: Date;
  origin?;
  location?: object;
  episode?: string[];
}

const {
  id,
  name,
  status,
  species,
  type,
  gender,
  image,
  url,
  created,
  origin,
  location,
  episode,
} = Astro.props;

import "../styles/Card.scss";

function setDate(string) {
  let date = new Date(string);

  return `creado el: ${date.getDay()}-${date.getMonth()}-${date.getFullYear()} a las ${date.getHours()}:${date.getMinutes()}`;
}

function SetGender(string) {
  let gender;

  if (string != undefined && string != null && string != "") {
    switch (string) {
      case "Male":
        gender = "Hombre";
        break;
      case "Female":
        gender = "Mujer";
        break;
      case "Female":
        gender = "Hombre";
        break;
      case "Genderless":
        gender = "No Binario";
        break;
      case "unknown":
        gender = "Desconocido";
        break;
    }
  }

  return gender;
}
---

<div class="card" id={id}>
  <span></span>
  <div class="card_info">
    <span class={status == "Alive" ? `info_status alive` : `info_status died`}>
      {status == "Alive" ? "Vivo" : "Muerto"}
    </span>

    <span>
      <span class="info_gender">
        {species}
      </span>
    </span>
  </div>

  <figure class="card_fig">
    <img src={image} loading="lazy" alt="" class="card_img" />
    <span class="card_created">{setDate(created)}</span>
  </figure>

  <div class={status == "Alive" ? `card_body` : `card_body died`}>
    <span class="body_info">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="icon icon-tabler icon-tabler-info-circle"
        width="18"
        height="18"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="#333333"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <circle cx="12" cy="12" r="9"></circle>
        <line x1="12" y1="8" x2="12.01" y2="8"></line>
        <polyline points="11 12 12 12 12 16 13 16"></polyline>
      </svg>
    </span>

    <h2 class="card_name">{name}</h2>

    <p class="card_gender">{SetGender(gender)}</p>

    <a href={url} class="card_cta"> Ver Personaje</a>
  </div>

  <div class="card_back">
    <i class="back_close">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="icon icon-tabler icon-tabler-circle-x"
        width="30"
        height="30"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="#ffffff"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <circle cx="12" cy="12" r="9"></circle>
        <path d="M10 10l4 4m0 -4l-4 4"></path>
      </svg>
    </i>
    <span class="back_title">Tipo</span>
    <p class="card_type">{type == "" ? "Desconocido" : type}</p>
    <span class="back_title">Origen</span>
    <a href={origin.url} class="card_origin">{origin.name}</a>
    <span class="back_title">Ubicacion</span>
    <a href={location.name} class="card_location">{location.name}</a>

    {
      episode.length > 0 ? (
        <>
          <span class="back_title">Ha aparecido en:</span>
        </>
      ) : (
        ""
      )
    }
    {
      episode.length > 0 ? (
        <ol class="back_episode_ol">
          {episode.map((ep) => (
            <li class="back_episode_li">
              <a href={ep} class="episode_link">
                {`Episodio: ${ep.substring(40, 42)}`}
              </a>
            </li>
          ))}
        </ol>
      ) : (
        ""
      )
    }
  </div>
</div>

<script>
  var cardNodes = document.querySelectorAll(".body_info");
  var backNodes = document.querySelectorAll(".back_close");

  cardNodes.forEach((cardNode) => {
    cardNode.addEventListener("click", () => {
      const parent = cardNode.parentNode;
      const parentCard = parent.parentNode;

      const backCard = parentCard.querySelector(".card_back");
      backCard.classList.add("active");
    });
  });

  backNodes.forEach((backNode) => {
    backNode.addEventListener("click", () => {
      const parent = backNode.parentElement;

      parent.classList.remove("active");
    });
  });
</script>
